import mensajeria.*
import mensajeros.*


describe "2 " {

    method hire(){
        matrixDelivery.hireCourier(neo)
        matrixDelivery.hireCourier(morfeo)
        matrixDelivery.hireCourier(trinity)
    }

    test "Contratar"{
        matrixDelivery.hireCourier(neo)
        assert.equals(#{neo}, matrixDelivery.getCouriers())
    }

    test "Despedir Uno" {
        matrixDelivery.hireCourier(neo)
        matrixDelivery.fireCourier(neo)
        assert.equals(#{}, matrixDelivery.getCouriers())
    }

    test "Despedir Todos" {
        self.hire()
        matrixDelivery.fireAllCouriers()
        assert.equals(#{}, matrixDelivery.getCouriers())
    }

    test "matrixDelivery grande" {
        self.hire()
        assert.that(matrixDelivery.isLarge())
    }

    test "matrixDelivery chica" {
        matrixDelivery.hireCourier(neo)
        assert.notThat(matrixDelivery.isLarge())
    }

    test "El primero puede entregar"{
        simplePackage.pay(50)
        matrixDelivery.hireCourier(neo)
        assert.that(matrixDelivery.canFirstDeliver(simplePackage))
    }

    test "Peso ultimo mensajero"{
        matrixDelivery.hireCourier(neo)
        matrixDelivery.hireCourier(morfeo)
        assert.equals(590, matrixDelivery.lastWeight())
    }
}


describe "3 " {

    method hire(){
        matrixDelivery.hireCourier(neo)
        matrixDelivery.hireCourier(morfeo)
        matrixDelivery.hireCourier(trinity) 
    }
    test "Todos pueden llevar el smallPackage"{
        assert.that(smallPackage.isDeliverable(neo))
        assert.that(smallPackage.isDeliverable(morfeo))
        assert.that(smallPackage.isDeliverable(trinity))
    }

    test "Precio bigPackage" {
        assert.equals(200, bigPackage.price())
    }

    test "Precio simplePackage" {
        assert.equals(50, simplePackage.price())
    }

    test "La mensajeria puede entregar?"{
        self.hire()
        simplePackage.pay(50)
        assert.that(matrixDelivery.canDeliver(simplePackage))
    }

    test "Quienes pueden entregar el simplePackage?" {
        self.hire()
        simplePackage.pay(50)
        assert.equals(#{neo,morfeo,trinity},matrixDelivery.whoCanDeliver(simplePackage))
    }

    test "Mensajeria con sobrepeso?"{
        self.hire()
        assert.notThat(matrixDelivery.overWeight())
        truck.trailerCount(100)
        assert.that(matrixDelivery.overWeight())
    }

    test "La mensajeria no puede entregar el simplePackage"{
        matrixDelivery.deliver(simplePackage)
        assert.equals(#{simplePackage}, matrixDelivery.getPendingPackages())
    }

    test "Conocer la factuarion"{
        matrixDelivery.hireCourier(neo)
        simplePackage.pay(50)
        matrixDelivery.deliver(simplePackage)
        assert.equals(50, matrixDelivery.balance())
    }

    test "Enviar conjunto"{
        self.hire()
        simplePackage.pay(50)
        bigPackage.pay(200)
        matrixDelivery.deliverBatch(#{simplePackage,bigPackage})
        assert.equals(250, matrixDelivery.balance()) // Si se envian los 2 deberia pasar de 0 a 250
    }

    test "No logra enviar conjunto"{
        matrixDelivery.deliverBatch(#{simplePackage,bigPackage})
        assert.equals(#{simplePackage,bigPackage}, matrixDelivery.getPendingPackages()) // Si se envian los 2 deberia pasar de 0 a 250
    }

    test "Enviar pendiente mas caro"{
        matrixDelivery.deliverBatch(#{simplePackage,bigPackage})
        self.hire()
        matrixDelivery.deliverMaxPendingPackage()
        assert.equals(#{simplePackage}, matrixDelivery.getPendingPackages())

    }

}

describe "Adicional" {

    method hire(){
        matrixDelivery.hireCourier(neo)
        matrixDelivery.hireCourier(morfeo)
        matrixDelivery.hireCourier(trinity) 
        matrixDelivery.hireCourier(samPorter) 
    }

    test "Paquete nuevo" {
        assert.equals(10, matrixPackage.price())
        assert.equals(matrix, matrixPackage.dropLocation())

        assert.notThat(matrixPackage.isPaid())
        matrixPackage.pay(10)
        assert.that(matrixPackage.isPaid())
    }

    test "Valores base mensajero nuevo" {
        assert.equals(190, samPorter.weight())
        assert.that(matrix.canPass(samPorter))
        assert.that(bridge.canPass(samPorter))
    }

    test "La mensajeria puede entregar?"{
        self.hire()
        matrixPackage.pay(10)
        assert.that(matrixDelivery.canDeliver(matrixPackage))
    }

    test "Quienes pueden entregar el paquete nuevo?" {
        self.hire()
        matrixPackage.pay(10)
        assert.equals(#{trinity,samPorter},matrixDelivery.whoCanDeliver(matrixPackage))
    }

    test "La mensajeria no puede entregar el paquete nuevo"{
        matrixDelivery.deliver(matrixPackage)
        assert.equals(#{matrixPackage}, matrixDelivery.getPendingPackages())
    }

    test "Conocer la factuarion"{
        matrixDelivery.hireCourier(samPorter)
        matrixPackage.pay(10)
        matrixDelivery.deliver(matrixPackage)
        assert.equals(10, matrixDelivery.balance())
    }

    test "Enviar conjunto"{
        self.hire()
        bigPackage.pay(200)
        matrixDelivery.deliverBatch(#{smallPackage,bigPackage})
        assert.equals(200, matrixDelivery.balance())
    }

    test "No logra enviar conjunto"{
        matrixDelivery.deliverBatch(#{simplePackage,bigPackage})
        assert.equals(#{simplePackage,bigPackage}, matrixDelivery.getPendingPackages())
    }

    test "Enviar pendiente mas caro"{
        matrixDelivery.deliverBatch(#{simplePackage,bigPackage})
        self.hire()
        simplePackage.pay(50)
        bigPackage.pay(200)
        matrixDelivery.deliverMaxPendingPackage()
        assert.equals(#{simplePackage}, matrixDelivery.getPendingPackages())

    }


}