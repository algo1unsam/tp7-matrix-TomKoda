import wollok.mirror.*
import mensajeros.*

describe "Test de mensajeros primera parte " {

	test "Morfeo en camion con 1 acoplado pesa 90kg + 500kg "{
	    assert.equals(590, morfeo.weight())
	}

	test "Camion con 2 acoplados pesan 1000kg + 90kg"{
		truck.trailerCount(2)
	    assert.equals(1090, morfeo.weight()) 
	}

	test "monopatin pesa 1kg + "{
	    assert.equals(1, skateBoard.weight())
	}

	test "Morfeo en monopatin pesa 90kg + 1kg "{
		morfeo.mobilityStrategy().vehicle(skateBoard)
	    assert.equals(91, morfeo.weight() )
	}

	test "Morfeo anda en el Nabucodonosor"{
	    assert.equals(truck, morfeo.mobilityStrategy().vehicle())
	}

	test "el puente deja pasar un mensajero liviano"{
	    assert.that(bridge.canPass(morfeo))
    }

    test "el puente no deja pasar un mensajero pesado"{
        truck.trailerCount(3)
	    assert.notThat(bridge.canPass(morfeo))
    }

    test "un paquete estaPago"{
		simplePackage.pay(50)
	    assert.that(simplePackage.isPaid())
    }

    test "un paquete pago con destino a Alsina puede ser entregado por Morfeo en camion liviano"{
		simplePackage.pay(50)
	    assert.that(simplePackage.isDeliverable(morfeo))
    }

    test "un paquete no pago no puede ser entregado por Morfeo"{
	    assert.notThat(simplePackage.isDeliverable(morfeo))
    }

	test "un paquete pago no puede entregado por Morfeo en camion de 3 acoplados"{
		simplePackage.pay(50)
        truck.trailerCount(3)
	    assert.notThat(simplePackage.isDeliverable(morfeo))
    }
}

describe "Test Neo" {
  	test "Peso" {
		assert.equals(0, neo.weight())
  	}

	test "Credito inicial" {
		assert.equals(0, neo.credit())
	}

	test "Puede llamar"{
		neo.credit(100)
		assert.that(neo.canCall())
	}

	test "Acceso a matrix"{
		neo.credit(100)
		assert.that(matrix.canPass(neo))
	}

	test "No se puede entregar paquete"{
		neo.credit(100)
		assert.notThat(matrixPackage.isDeliverable(neo))

	}
}

describe "Test Trinity" {
  	test "Peso Inicial" {
		assert.equals(901, trinity.weight())
  	}

	test "Puede llamar"{
		assert.that(trinity.canCall())
	}

	test "Entraga en Puente"{
		simplePackage.pay(50)
		assert.that(simplePackage.isDeliverable(trinity))
	}

	test "Entraga en Matrix"{
		matrixPackage.pay(50)
		assert.that(matrixPackage.isDeliverable(trinity))
	}

	test "entrega paquete si pagar" {
		assert.notThat(simplePackage.isDeliverable(trinity))
	}
}


